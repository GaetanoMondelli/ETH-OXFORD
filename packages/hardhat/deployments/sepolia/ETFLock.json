{
  "address": "0x63157F59FCB93bC0c1CD314C70E2d85f75cBB2a4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_evmVerifierOfFlareTransaction",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            }
          ],
          "internalType": "struct Token[]",
          "name": "_requiredTokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "attestationType",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sourceId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "votingRound",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lowestUsedTimestamp",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "transactionHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "requiredConfirmations",
                      "type": "uint16"
                    },
                    {
                      "internalType": "bool",
                      "name": "provideInput",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "listEvents",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint32[]",
                      "name": "logIndices",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct EVMTransaction.RequestBody",
                  "name": "requestBody",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "blockNumber",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "timestamp",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address",
                      "name": "sourceAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isDeployment",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "receivingAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "input",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint8",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint32",
                          "name": "logIndex",
                          "type": "uint32"
                        },
                        {
                          "internalType": "address",
                          "name": "emitterAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "topics",
                          "type": "bytes32[]"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "bool",
                          "name": "removed",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct EVMTransaction.Event[]",
                      "name": "events",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct EVMTransaction.ResponseBody",
                  "name": "responseBody",
                  "type": "tuple"
                }
              ],
              "internalType": "struct EVMTransaction.Response",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct EVMTransaction.Proof",
          "name": "_transaction",
          "type": "tuple"
        }
      ],
      "name": "checkBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            }
          ],
          "internalType": "struct Token[]",
          "name": "_tokens",
          "type": "tuple[]"
        }
      ],
      "name": "depositLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "evmVerifierOfFlareTransaction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultStates",
      "outputs": [
        {
          "internalType": "enum VaultState[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "attestationType",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sourceId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "votingRound",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lowestUsedTimestamp",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "transactionHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "requiredConfirmations",
                      "type": "uint16"
                    },
                    {
                      "internalType": "bool",
                      "name": "provideInput",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "listEvents",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint32[]",
                      "name": "logIndices",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct EVMTransaction.RequestBody",
                  "name": "requestBody",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "blockNumber",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "timestamp",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address",
                      "name": "sourceAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isDeployment",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "receivingAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "input",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint8",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint32",
                          "name": "logIndex",
                          "type": "uint32"
                        },
                        {
                          "internalType": "address",
                          "name": "emitterAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "topics",
                          "type": "bytes32[]"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "bool",
                          "name": "removed",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct EVMTransaction.Event[]",
                      "name": "events",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct EVMTransaction.ResponseBody",
                  "name": "responseBody",
                  "type": "tuple"
                }
              ],
              "internalType": "struct EVMTransaction.Response",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct EVMTransaction.Proof",
          "name": "transaction",
          "type": "tuple"
        }
      ],
      "name": "isEVMTransactionProofValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "attestationType",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sourceId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "votingRound",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lowestUsedTimestamp",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "transactionHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "requiredConfirmations",
                      "type": "uint16"
                    },
                    {
                      "internalType": "bool",
                      "name": "provideInput",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "listEvents",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint32[]",
                      "name": "logIndices",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct EVMTransaction.RequestBody",
                  "name": "requestBody",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "blockNumber",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "timestamp",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address",
                      "name": "sourceAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isDeployment",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "receivingAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "input",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint8",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint32",
                          "name": "logIndex",
                          "type": "uint32"
                        },
                        {
                          "internalType": "address",
                          "name": "emitterAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "topics",
                          "type": "bytes32[]"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "bool",
                          "name": "removed",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct EVMTransaction.Event[]",
                      "name": "events",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct EVMTransaction.ResponseBody",
                  "name": "responseBody",
                  "type": "tuple"
                }
              ],
              "internalType": "struct EVMTransaction.Response",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct EVMTransaction.Proof",
          "name": "originalTransaction",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "eventNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "enum VaultState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9647e1c393d33bd5b963616be13e30166eade28d48667dc8ecff7af98b0d4d7a",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x63157F59FCB93bC0c1CD314C70E2d85f75cBB2a4",
    "transactionIndex": 0,
    "gasUsed": "2213138",
    "logsBloom": "0x
    "blockHash": "0x7bdb0d57ae123b3264a198d6923086e824c651de30e1f1a2e1b4b49d33078a14",
    "transactionHash": "0x9647e1c393d33bd5b963616be13e30166eade28d48667dc8ecff7af98b0d4d7a",
    "logs": [],
    "blockNumber": 5456764,
    "cumulativeGasUsed": "2213138",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0bd4a6D3eFbB0aa8b191AE71E7dfF41c10fe8B9F",
    "31337",
    [
      {
        "_address": "0xFCb7E64A67dFAb710c3064e097B50B1d93898E71",
        "_quantity": "100000000000000000000",
        "_chainId": "31337",
        "_contributor": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203"
      },
      {
        "_address": "0x60a0F6a9952061A78E903B98e5452A996FD4233c",
        "_quantity": "50000000000000000000",
        "_chainId": "31337",
        "_contributor": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203"
      }
    ]
  ],
  "numDeployments": 6,
  "solcInputHash": "3c210b035aa3c28c4dec96490c05a199",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmVerifierOfFlareTransaction\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"internalType\":\"struct Token[]\",\"name\":\"_requiredTokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"_transaction\",\"type\":\"tuple\"}],\"name\":\"checkBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"internalType\":\"struct Token[]\",\"name\":\"_tokens\",\"type\":\"tuple[]\"}],\"name\":\"depositLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmVerifierOfFlareTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultStates\",\"outputs\":[{\"internalType\":\"enum VaultState[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"transaction\",\"type\":\"tuple\"}],\"name\":\"isEVMTransactionProofValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"originalTransaction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"enum VaultState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETFLock.sol\":\"ETFLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoManagerGenesis {\\n\\n    function getCurrentPriceEpochId() external view returns (uint256 _priceEpochId);\\n\\n}\\n\",\"keccak256\":\"0xe3282e14304e70a34f6c7a6ee563267635a6cc6eff09f2459a43946ae3a113ab\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoManagerGenesis.sol\\\";\\n\\ninterface IFtsoManager is IFtsoManagerGenesis {\\n\\n    event FtsoAdded(IIFtso ftso, bool add);\\n    event FallbackMode(bool fallbackMode);\\n    event FtsoFallbackMode(IIFtso ftso, bool fallbackMode);\\n    event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock);\\n    event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId);\\n    event InitializingCurrentEpochStateForRevealFailed(IIFtso ftso, uint256 epochId);\\n    event FinalizingPriceEpochFailed(IIFtso ftso, uint256 epochId, IFtso.PriceFinalizationType failingType);\\n    event DistributingRewardsFailed(address ftso, uint256 epochId);\\n    event AccruingUnearnedRewardsFailed(uint256 epochId);\\n    event UseGoodRandomSet(bool useGoodRandom, uint256 maxWaitForGoodRandomSeconds);\\n\\n    function active() external view returns (bool);\\n\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n    \\n    function getCurrentPriceEpochData() external view \\n        returns (\\n            uint256 _priceEpochId,\\n            uint256 _priceEpochStartTimestamp,\\n            uint256 _priceEpochEndTimestamp,\\n            uint256 _priceEpochRevealEndTimestamp,\\n            uint256 _currentTimestamp\\n        );\\n\\n    function getFtsos() external view returns (IIFtso[] memory _ftsos);\\n\\n    function getPriceEpochConfiguration() external view \\n        returns (\\n            uint256 _firstPriceEpochStartTs,\\n            uint256 _priceEpochDurationSeconds,\\n            uint256 _revealEpochDurationSeconds\\n        );\\n\\n    function getRewardEpochConfiguration() external view \\n        returns (\\n            uint256 _firstRewardEpochStartTs,\\n            uint256 _rewardEpochDurationSeconds\\n        );\\n\\n    function getFallbackMode() external view \\n        returns (\\n            bool _fallbackMode,\\n            IIFtso[] memory _ftsos,\\n            bool[] memory _ftsoInFallbackMode\\n        );\\n}\\n\",\"keccak256\":\"0x878d2d19d239d8a91515a304ed2d461f31ae8aeaedef6a7bc92509e6fc4258d0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtsoRewardManager {\\n\\n    event RewardClaimed(\\n        address indexed dataProvider,\\n        address indexed whoClaimed,\\n        address indexed sentTo,\\n        uint256 rewardEpoch, \\n        uint256 amount\\n    );\\n\\n    event UnearnedRewardsAccrued(\\n        uint256 epochId,\\n        uint256 reward\\n    );\\n\\n    event RewardsDistributed(\\n        address indexed ftso,\\n        uint256 epochId,\\n        address[] addresses,\\n        uint256[] rewards\\n    );\\n\\n    event RewardClaimsEnabled(\\n        uint256 rewardEpochId\\n    ); \\n\\n    event FeePercentageChanged(\\n        address indexed dataProvider,\\n        uint256 value,\\n        uint256 validFromEpoch\\n    );\\n\\n    event RewardClaimsExpired(\\n        uint256 rewardEpochId\\n    );    \\n\\n    event FtsoRewardManagerActivated(address ftsoRewardManager);\\n    event FtsoRewardManagerDeactivated(address ftsoRewardManager);\\n\\n    /**\\n     * @notice Allows a percentage delegator to claim rewards.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     * @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\\n     * @dev Retained for backward compatibility.\\n     * @dev This function is deprecated - use `claim` instead.\\n     */\\n    function claimReward(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     */\\n    function claim(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256 _rewardEpoch,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n    \\n    /**\\n     * @notice Allows the sender to claim rewards from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     * @dev This function is deprecated - use `claimFromDataProviders` instead.\\n     */\\n    function claimRewardFromDataProviders(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     */\\n    function claimFromDataProviders(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\\n     * @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\\n     *   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\\n     * @notice Claimed amount is automatically wrapped.\\n     * @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\\n     *   then fee is paid to executor for each claimed address from the list.\\n     * @param _rewardOwners         list of reward owners to claim for\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     */\\n    function autoClaim(address[] calldata _rewardOwners, uint256 _rewardEpoch) external;\\n    \\n    /**\\n     * @notice Allows data provider to set (or update last) fee percentage.\\n     * @param _feePercentageBIPS    number representing fee percentage in BIPS\\n     * @return _validFromEpoch      reward epoch number when the setting becomes effective.\\n     */\\n    function setDataProviderFeePercentage(uint256 _feePercentageBIPS)\\n        external returns (uint256 _validFromEpoch);\\n\\n    /**\\n     * @notice Allows reward claiming\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current fee percentage of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     */\\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\\n        external view returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\\n     * @param _dataProvider         address representing data provider\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getDataProviderFeePercentage(\\n        address _dataProvider,\\n        uint256 _rewardEpoch\\n    )\\n        external view\\n        returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the scheduled fee percentage changes of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     * @return _feePercentageBIPS   positional array of fee percentages in BIPS\\n     * @return _validFromEpoch      positional array of block numbers the fee settings are effective from\\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\\n     */\\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view \\n        returns (\\n            uint256[] memory _feePercentageBIPS,\\n            uint256[] memory _validFromEpoch,\\n            bool[] memory _fixed\\n        );\\n\\n    /**\\n     * @notice Returns information on epoch reward\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _totalReward         number representing the total epoch reward\\n     * @return _claimedReward       number representing the amount of total epoch reward that has been claimed\\n     */\\n    function getEpochReward(uint256 _rewardEpoch) external view\\n        returns (uint256 _totalReward, uint256 _claimedReward);\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _dataProviders       positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getStateOfRewards(\\n        address _beneficiary,\\n        uint256 _rewardEpoch\\n    )\\n        external view \\n        returns (\\n            address[] memory _dataProviders,\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProviders        positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     */\\n    function getStateOfRewardsFromDataProviders(\\n        address _beneficiary,\\n        uint256 _rewardEpoch,\\n        address[] calldata _dataProviders\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the start and the end of the reward epoch range for which the reward is claimable\\n     * @param _startEpochId         the oldest epoch id that allows reward claiming\\n     * @param _endEpochId           the newest epoch id that allows reward claiming\\n     */\\n    function getEpochsWithClaimableRewards() external view \\n        returns (\\n            uint256 _startEpochId,\\n            uint256 _endEpochId\\n        );\\n\\n    /**\\n     * @notice Returns the next claimable reward epoch for '_rewardOwner'.\\n     * @param _rewardOwner          address of the reward owner\\n     */\\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\\n     * @param _beneficiary          address of reward beneficiary\\n     * @return _epochIds            array of epoch ids\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view returns (\\n        uint256[] memory _epochIds\\n    );\\n\\n    /**\\n     * @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProvider         address representing the data provider\\n     * @param _claimer              address representing the claimer\\n     * @return _claimed             boolean indicating if reward has been claimed\\n     * @return _amount              number representing the claimed amount\\n     */\\n    function getClaimedReward(\\n        uint256 _rewardEpoch,\\n        address _dataProvider,\\n        address _claimer\\n    )\\n        external view\\n        returns (\\n            bool _claimed,\\n            uint256 _amount\\n        );\\n\\n    /**\\n     * @notice Return reward epoch that will expire, when new reward epoch will start\\n     * @return Reward epoch id that will expire next\\n     */\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n\\n    /**\\n     * @notice Return reward epoch vote power block\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    /**\\n     * @notice Return current reward epoch number\\n     */\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Return initial reward epoch number\\n     */\\n    function getInitialRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\\n     * @param _rewardEpoch                      reward epoch number\\n     * @param _dataProvider                     address representing the data provider\\n     * @return _rewardAmount                    number representing the amount of rewards\\n     * @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations\\n     */\\n    function getDataProviderPerformanceInfo(\\n        uint256 _rewardEpoch,\\n        address _dataProvider\\n    )\\n        external view \\n        returns (\\n            uint256 _rewardAmount,\\n            uint256 _votePowerIgnoringRevocation\\n        );\\n}\\n\",\"keccak256\":\"0x03ea94df67caf6f0a31f2d24a08e4ecb3703d177ae181ecf3fd2ddd4d59ac102\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IPriceSubmitter {\\n    /**\\n     * Event emitted when price hashes were submitted through PriceSubmitter.\\n     * @param submitter the address of the sender\\n     * @param epochId current price epoch id\\n     * @param ftsos array of ftsos that correspond to the indexes in call\\n     * @param hashes the submitted hashes\\n     * @param timestamp current block timestamp\\n     */\\n    event PriceHashesSubmitted(\\n        address indexed submitter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        bytes32[] hashes,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Event emitted when prices were revealed through PriceSubmitter.\\n     * @param voter the address of the sender\\n     * @param epochId id of the epoch in which the price hash was submitted\\n     * @param ftsos array of ftsos that correspond to the indexes in the call\\n     * @param prices the submitted prices\\n     * @param timestamp current block timestamp\\n     */\\n    event PricesRevealed(\\n        address indexed voter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        uint256[] prices,\\n        uint256[] randoms,\\n        uint256 timestamp\\n    );\\n    \\n    /**\\n     * @notice Submits price hashes for current epoch\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _hashes               List of hashed price and random number\\n     * @notice Emits PriceHashesSubmitted event\\n     */\\n    function submitPriceHashes(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        bytes32[] memory _hashes\\n    ) external;\\n\\n    /**\\n     * @notice Reveals submitted prices during epoch reveal period\\n     * @param _epochId              Id of the epoch in which the price hashes was submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _prices               List of submitted prices in USD\\n     * @param _randoms              List of submitted random numbers\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PricesRevealed event\\n     */\\n    function revealPrices(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        uint256[] memory _prices,\\n        uint256[] memory _randoms\\n    ) external;\\n\\n    /**\\n     * Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\\n     * If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\\n     * bit in the result will be 1.\\n     */    \\n    function voterWhitelistBitmap(address _voter) external view returns (uint256);\\n\\n    function getVoterWhitelister() external view returns (address);\\n    function getFtsoRegistry() external view returns (IFtsoRegistryGenesis);\\n    function getFtsoManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4859d5a14334c7905a7813ac8ee16151f8395611f832ff3bdf741be7f53a13a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVoterWhitelister {\\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterWhitelisted(address voter, uint256 ftsoIndex);\\n    \\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterRemovedFromWhitelist(address voter, uint256 ftsoIndex);\\n\\n    /**\\n     * Raised when an account is chilled from the voter whitelist.\\n     */\\n    event VoterChilled(address voter, uint256 untilRewardEpoch);\\n\\n    /**\\n     * Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\\n     * May be called by any address.\\n     */\\n    function requestWhitelistingVoter(address _voter, uint256 _ftsoIndex) external;\\n\\n    /**\\n     * Request to whitelist `_voter` account to all active ftsos.\\n     * May be called by any address.\\n     * It returns an array of supported ftso indices and success flag per index.\\n     */\\n    function requestFullVoterWhitelisting(\\n        address _voter\\n    ) \\n        external \\n        returns (\\n            uint256[] memory _supportedIndices,\\n            bool[] memory _success\\n        );\\n\\n    /**\\n     * Maximum number of voters in the whitelist for a new FTSO.\\n     */\\n    function defaultMaxVotersForFtso() external view returns (uint256);\\n    \\n    /**\\n     * Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\\n     */\\n    function maxVotersForFtso(uint256 _ftsoIndex) external view returns (uint256);\\n\\n    /**\\n     * Get whitelisted price providers for ftso with `_symbol`\\n     */\\n    function getFtsoWhitelistedPriceProvidersBySymbol(string memory _symbol) external view returns (address[] memory);\\n\\n    /**\\n     * Get whitelisted price providers for ftso at `_ftsoIndex`\\n     */\\n    function getFtsoWhitelistedPriceProviders(uint256 _ftsoIndex) external view returns (address[] memory);\\n\\n    /**\\n     * In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\\n     * A voter can whitelist again from a returned reward epoch onwards.\\n     */\\n    function chilledUntilRewardEpoch(address _voter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfaa76e4db7440304e5c1518e24b8c5008cbda90e30d31646f48346be20057669\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name AddressValidity\\n * @custom:id 0x05\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion whether a string represents a valid address on an external chain.\\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\\n * Indicator of validity is provided.\\n * If the address is valid, its standard form and standard hash are computed.\\n * Validity criteria for each supported chain:\\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\\n */\\ninterface AddressValidity {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId Id of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for AddressValidity attestation type\\n     * @param addressStr Address to be verified.\\n     */\\n    struct RequestBody {\\n        string addressStr;\\n    }\\n\\n    /**\\n     * @notice Response body for AddressValidity attestation type\\n     * @param isValid Boolean indicator of the address validity.\\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address. Otherwise a zero bytes32 string.\\n     */\\n    struct ResponseBody {\\n        bool isValid;\\n        string standardAddress;\\n        bytes32 standardAddressHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd30e59f7b4ef10d6d33e8c85af3157abca3799cb5b2ee5d2d20878567275dd99\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name BalanceDecreasingTransaction\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\\n *\\n * A transaction is considered \\u201cbalance decreasing\\u201d for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\\n * Some of the request and response fields are chain specific as described below.\\n * The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\\n *\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\\n * If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\\n * The `sourceAddress` is the address of the indicated transaction input.\\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\\n * Can be negative.\\n * - `blockTimestamp` is the mediantime of a block.\\n *\\n * ### XRPL\\n *\\n * - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\\n *\\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\\n * Can be negative.\\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\\n *\\n * @custom:lut `blockTimestamp`\\n */\\ninterface BalanceDecreasingTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered. This is a security measure to prevent a collision of attestation hashes.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for BalanceDecreasingTransaction attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        bytes32 sourceAddressIndicator;\\n    }\\n\\n    /**\\n     * @notice Response body for BalanceDecreasingTransaction attestation type.\\n     * @param blockNumber The number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\\n     * @param spentAmount Amount spent by the source address in minimal units.\\n     * @param standardPaymentReference Standard payment reference of the transaction.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        int256 spentAmount;\\n        bytes32 standardPaymentReference;\\n    }\\n}\\n\",\"keccak256\":\"0x30df7b48485b7029d406aa6f2b98a6ad3685a2358ce006707870cd848c3b6b28\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ConfirmedBlockHeightExists\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion that a block with `blockNumber` is confirmed.\\n * It also provides data to compute the block production rate in the given time range.\\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\\n *\\n *\\n *  Current confirmation heights consensus:\\n *\\n *\\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\\n * | ------- | --------- | ----------------------- | ------------ |\\n * | `BTC`   | 0         | 6                       | mediantime   |\\n * | `DOGE`  | 2         | 60                      | mediantime   |\\n * | `XRP`   | 3         | 3                       | close_time   |\\n *\\n *\\n *\\n *\\n * @custom:lut `lowestQueryWindowBlockTimestamp`\\n */\\ninterface ConfirmedBlockHeightExists {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\\n     * @param blockNumber The number of the block the request wants a confirmation of.\\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\\n     */\\n    struct RequestBody {\\n        uint64 blockNumber;\\n        uint64 queryWindow;\\n    }\\n\\n    /**\\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 blockTimestamp;\\n        uint64 numberOfConfirmations;\\n        uint64 lowestQueryWindowBlockNumber;\\n        uint64 lowestQueryWindowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc0b8563cb674c38c9569021bf662031877311f32c6bb9993b511c60d57fc7fd5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name EVMTransaction\\n * @custom:id 0x06\\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\\n * @author Flare\\n * @notice A relay of a transaction from an EVM chain.\\n * This type is only relevant for EVM-compatible chains.\\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\\n * If an indicated event does not exist, the request is rejected.\\n * @custom:lut `timestamp`\\n */\\ninterface EVMTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId  ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for EVM transaction attestation type\\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\\n     * @param transactionHash Hash of the transaction(transactionHash).\\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\\n     * @param provideInput If true, \\\"input\\\" field is included in the response.\\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionHash;\\n        uint16 requiredConfirmations;\\n        bool provideInput;\\n        bool listEvents;\\n        uint32[] logIndices;\\n    }\\n\\n    /**\\n     * @notice Response body for EVM transaction attestation type\\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param timestamp Timestamp of the block in which the transaction is included.\\n     * @param sourceAddress The address (from) that signed the transaction.\\n     * @param isDeployment Indicate whether it is a contract creation transaction.\\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\\n     * @param value The value transferred by the initial transaction in wei.\\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\\n     * @param status Status of the transaction 1 - success, 0 - failure.\\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 timestamp;\\n        address sourceAddress;\\n        bool isDeployment;\\n        address receivingAddress;\\n        uint256 value;\\n        bytes input;\\n        uint8 status;\\n        Event[] events;\\n    }\\n\\n    /**\\n     * @notice Event log record\\n     * @custom:above An `Event` is a struct with the following fields:\\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n     * @param logIndex The consecutive number of the event in block.\\n     * @param emitterAddress The address of the contract that emitted the event.\\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\\n     */\\n    struct Event {\\n        uint32 logIndex;\\n        address emitterAddress;\\n        bytes32[] topics;\\n        bytes data;\\n        bool removed;\\n    }\\n}\\n\",\"keccak256\":\"0xd0665e3ac546858a8becbf7f0600fe87b6f003120f1d731759d14c6b5b8ae6d2\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./AddressValidity.sol\\\";\\n\\ninterface IAddressValidityVerification {\\n\\n   function verifyAddressValidity(\\n      AddressValidity.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xcbe043d55f2fd1e57e12515b2c7cf024d45121303a8d8cdf8822cba40c9e5746\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./BalanceDecreasingTransaction.sol\\\";\\n\\ninterface IBalanceDecreasingTransactionVerification {\\n\\n   function verifyBalanceDecreasingTransaction(\\n      BalanceDecreasingTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x4c23fc95b39a72f3dbf1d53a1cc1a0567f05770c1e1d6cd981b31f8f9ba3b5b3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ConfirmedBlockHeightExists.sol\\\";\\n\\ninterface IConfirmedBlockHeightExistsVerification {\\n\\n   function verifyConfirmedBlockHeightExists(\\n      ConfirmedBlockHeightExists.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x12e36fb4b606598150995483e3fc5badc39f727834403907de61dc4968aa117f\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./EVMTransaction.sol\\\";\\n\\ninterface IEVMTransactionVerification {\\n\\n   function verifyEVMTransaction(\\n      EVMTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xb0cea88e37fc6f45623aff43ad1d1231259c7b0959262b074e9f94b51721b092\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./Payment.sol\\\";\\n\\ninterface IPaymentVerification {\\n\\n   function verifyPayment(\\n      Payment.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x73beb24942b4ca93c02441a6985e37db659368b191cfe9737ea30b0a79634fa6\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ReferencedPaymentNonexistence.sol\\\";\\n\\ninterface IReferencedPaymentNonexistenceVerification {\\n\\n   function verifyReferencedPaymentNonexistence(\\n      ReferencedPaymentNonexistence.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x2fd0b205022bdfd99ba765e97c5b69fc87ef0febe53d7e123c8cef24e152a613\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IStateConnector {\\n    event AttestationRequest(\\n        address sender,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event RoundFinalised(\\n        uint256 indexed roundId,\\n        bytes32 merkleRoot\\n    );\\n\\n    /**\\n     * The method to call for requesting a new attestation.\\n     * Emits event `AttestationRequest`, which triggers work by attestation providers.\\n     */\\n    function requestAttestations(bytes calldata _data) external;\\n\\n    /**\\n     * Last finalized round id.\\n     */\\n    function lastFinalizedRoundId() external view returns (uint256 _roundId);\\n\\n    /**\\n     * Get Merkle root for the round and check for buffer overflows.\\n     */\\n    function merkleRoot(uint256 _roundId) external view returns (bytes32);\\n\\n    /**\\n     * The first buffer timestamp\\n     * (start time in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_TIMESTAMP_OFFSET() external view returns (uint256);\\n\\n    /**\\n     * Amount of time a buffer is active before cycling to the next one\\n     * (round length in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08bc17a7293cb38902d8592cdad00434c44f033c7f735cf49b67d963cf48ed74\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name Payment\\n * @custom:id 0x01\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\\n * transaction should be formed to be provable by this attestation type.\\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\\n * If the summary is successfully calculated, the response is assembled from the summary.\\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\\n *\\n * If the summary is not successfully calculated, the attestation request is rejected.\\n * @custom:lut `blockTimestamp`\\n */\\ninterface Payment {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for Payment attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        uint256 inUtxo;\\n        uint256 utxo;\\n    }\\n\\n    /**\\n     * @notice Response body for Payment attestation type\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the source address.\\n     * @param receivingAddressHash Standard address hash of the receiving address. The zero 32-byte string if there is no receivingAddress (if `status` is not success).\\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address. Relevant if the transaction is unsuccessful.\\n     * @param spentAmount Amount in minimal units spent by the source address.\\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address. Relevant if the transaction status is unsuccessful.\\n     * @param receivedAmount Amount in minimal units received by the receiving address.\\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address. Relevant if the transaction is unsuccessful.\\n     * @param standardPaymentReference [Standard payment reference](/specs/attestations/external-chains/standardPaymentReference.md) of the transaction.\\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\\n     * @param status  [Succes status](/specs/attestations/external-chains/transactions.md#transaction-success-status) of the transaction: 0 - success, 1 - failed by sender's fault,x  2 - failed by receiver's fault.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        bytes32 receivingAddressHash;\\n        bytes32 intendedReceivingAddressHash;\\n        int256 spentAmount;\\n        int256 intendedSpentAmount;\\n        int256 receivedAmount;\\n        int256 intendedReceivedAmount;\\n        bytes32 standardPaymentReference;\\n        bool oneToOne;\\n        uint8 status;\\n    }\\n}\\n\",\"keccak256\":\"0x3127f961b3eb6575ac983b39bef5a61126a4dca50f115dc2056b8e4dfada01b3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ReferencedPaymentNonexistence\\n * @custom:id 0x04\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\\n * \\n * \\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \\n *\\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\\n *\\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\\n * The criteria and timestamp are chain specific.\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n *\\n * Criteria for the transaction:\\n *\\n *\\n * - It is not coinbase transaction.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\\n *\\n * \\n * Timestamp is `mediantime`.\\n\\n * ### XRPL\\n *\\n *\\n *\\n * Criteria for the transaction:\\n * - The transaction is of type payment.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\\n * - One of the following is true:\\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\\n *\\n * \\n * Timestamp is `close_time` converted to UNIX time.\\n *\\n * @custom:lut `minimalBlockTimestamp`\\n */\\ninterface ReferencedPaymentNonexistence {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ReferencePaymentNonexistence attestation type\\n     * @param minimalBlockNumber The start block of the search range.\\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\\n     * @param deadlineTimestamp The timestamp to be included in the search range.\\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\\n     * @param amount The requested amount in minimal units that had to be payed.\\n     * @param standardPaymentReference The requested standard payment reference.\\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\\n     */\\n    struct RequestBody {\\n        uint64 minimalBlockNumber;\\n        uint64 deadlineBlockNumber;\\n        uint64 deadlineTimestamp;\\n        bytes32 destinationAddressHash;\\n        uint256 amount;\\n        bytes32 standardPaymentReference;\\n    }\\n\\n    /**\\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 minimalBlockTimestamp;\\n        uint64 firstOverflowBlockNumber;\\n        uint64 firstOverflowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0f61aa13fbc26ceef5f26adb75293023a658c28994acad975e5bd0eda164a563\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IFlareContractRegistry} from \\\"./userInterfaces/IFlareContractRegistry.sol\\\";\\n// Auto generated imports\\n// AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\\nimport { IStateConnector } from \\\"../stateConnector/interface/IStateConnector.sol\\\";\\nimport { IPriceSubmitter } from \\\"../ftso/userInterfaces/IPriceSubmitter.sol\\\";\\nimport { IFtsoRewardManager } from \\\"../ftso/userInterfaces/IFtsoRewardManager.sol\\\";\\nimport { IFtsoRegistry } from \\\"../ftso/userInterfaces/IFtsoRegistry.sol\\\";\\nimport { IVoterWhitelister } from \\\"../ftso/userInterfaces/IVoterWhitelister.sol\\\";\\nimport { IFtsoManager } from \\\"../ftso/userInterfaces/IFtsoManager.sol\\\";\\nimport { IWNat } from \\\"../util-contracts/token/userInterfaces/IWNat.sol\\\";\\nimport { IEVMTransactionVerification } from \\\"../stateConnector/interface/IEVMTransactionVerification.sol\\\";\\nimport { IAddressValidityVerification } from \\\"../stateConnector/interface/IAddressValidityVerification.sol\\\";\\nimport { IBalanceDecreasingTransactionVerification } from \\\"../stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\\\";\\nimport { IConfirmedBlockHeightExistsVerification } from \\\"../stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\\\";\\nimport { IPaymentVerification } from \\\"../stateConnector/interface/IPaymentVerification.sol\\\";\\nimport { IReferencedPaymentNonexistenceVerification } from \\\"../stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\\\"; \\n// END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\\n\\n// Library is intended to be used inline, so the strings are all memory allocated (instead of calldata)\\nlibrary FlareContractsRegistryLibrary {\\n    address internal constant FLARE_CONTRACT_REGISTRY_ADDRESS =\\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\\n\\n    IFlareContractRegistry internal constant FLARE_CONTRACT_REGISTRY =\\n        IFlareContractRegistry(FLARE_CONTRACT_REGISTRY_ADDRESS);\\n\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(\\n        string memory _name\\n    ) internal view returns (address) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByName(_name);\\n    }\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(\\n        bytes32 _nameHash\\n    ) internal view returns (address) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByHash(_nameHash);\\n    }\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(\\n        string[] memory _names\\n    ) internal view returns (address[] memory) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByName(_names);\\n    }\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(\\n        bytes32[] memory _nameHashes\\n    ) internal view returns (address[] memory) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByHash(_nameHashes);\\n    }\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts()\\n        internal\\n        view\\n        returns (string[] memory _names, address[] memory _addresses)\\n    {\\n        return FLARE_CONTRACT_REGISTRY.getAllContracts();\\n    }\\n\\n    // Nice typed getters for all the important contracts\\n    // AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\\n    function getStateConnector() internal view returns(IStateConnector){\\nreturn IStateConnector(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"StateConnector\\\"));\\n\\n}\\n\\n\\nfunction getPriceSubmitter() internal view returns(IPriceSubmitter){\\nreturn IPriceSubmitter(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"PriceSubmitter\\\"));\\n\\n}\\n\\n\\nfunction getFtsoRewardManager() internal view returns(IFtsoRewardManager){\\nreturn IFtsoRewardManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoRewardManager\\\"));\\n\\n}\\n\\n\\nfunction getFtsoRegistry() internal view returns(IFtsoRegistry){\\nreturn IFtsoRegistry(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoRegistry\\\"));\\n\\n}\\n\\n\\nfunction getVoterWhitelister() internal view returns(IVoterWhitelister){\\nreturn IVoterWhitelister(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"VoterWhitelister\\\"));\\n\\n}\\n\\n\\nfunction getFtsoManager() internal view returns(IFtsoManager){\\nreturn IFtsoManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoManager\\\"));\\n\\n}\\n\\n\\nfunction getWNat() internal view returns(IWNat){\\nreturn IWNat(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"WNat\\\"));\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIEVMTransactionVerification() internal view returns(IEVMTransactionVerification){\\nreturn IEVMTransactionVerification(0xf37AD1278917c04fb291C75a42e61710964Cb57c);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIAddressValidityVerification() internal view returns(IAddressValidityVerification){\\nreturn IAddressValidityVerification(0xd94721da1dD5e222020D256fC073e8Be301ebdCB);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIBalanceDecreasingTransactionVerification() internal view returns(IBalanceDecreasingTransactionVerification){\\nreturn IBalanceDecreasingTransactionVerification(0xeDa84A2eeDfdA53e7c33ef5fDe7B2798B910BF4A);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIConfirmedBlockHeightExistsVerification() internal view returns(IConfirmedBlockHeightExistsVerification){\\nreturn IConfirmedBlockHeightExistsVerification(0x632A984d63f9Ae3C2Eb31e0dc2EeEaE1E282E0da);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIPaymentVerification() internal view returns(IPaymentVerification){\\nreturn IPaymentVerification(0x1ECe6dd08D19c0faf3AB8cEcB146cd5ea5b9b7d9);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIReferencedPaymentNonexistenceVerification() internal view returns(IReferencedPaymentNonexistenceVerification){\\nreturn IReferencedPaymentNonexistenceVerification(0xDfE5926fABA166187B29C33BC95DfDb18bbE52cd);\\n\\n}\\n \\n    // END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\\n}\\n\",\"keccak256\":\"0xa621627ceb67f88d870556f37d2460f213ed40579e628fb03d484782d7312a90\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IWNat {\\n    /**\\n     * @notice Deposit native token and mint WNAT ERC20.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw native token and burn WNAT ERC20.\\n     * @param _amount The amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external;\\n    \\n    /**\\n     * @notice Deposit native token from msg.sender and mint WNAT ERC20.\\n     * @param _recipient An address to receive minted WNAT.\\n     */\\n    function depositTo(address _recipient) external payable;\\n    \\n    /**\\n     * @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\\n     * @param _owner An address spending the native tokens.\\n     * @param _amount The amount to spend.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_owners`'s tokens of at least\\n     * `_amount`.\\n     */\\n    function withdrawFrom(address _owner, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0eeddaabf31e538f15f9c2e54f4c0c8cebaea41b952cd8a978b01dc1504da903\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd015bc43b8a22afaba50c42a56409df0d81172845dabc124a3d37b3b0bbd4df5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfae54442fb489dccc5f0a0a6f8d946c9fdebceece98fcb087c5998fa1363ff30\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * Interface for contracts delegating their governance vote power.\\n */\\ninterface IGovernanceVotePower {\\n    /**\\n     * Delegates all governance vote power of `msg.sender` to address `_to`.\\n     * @param _to The address of the recipient.\\n     */\\n    function delegate(address _to) external;\\n\\n    /**\\n     * Undelegates all governance vote power of `msg.sender`.\\n     */\\n    function undelegate() external;\\n\\n    /**\\n     * Gets the governance vote power of an address at a given block number, including\\n     * all delegations made to it.\\n     * @param _who The address being queried.\\n     * @param _blockNumber The block number at which to fetch the vote power.\\n     * @return Governance vote power of `_who` at `_blockNumber`.\\n     */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Gets the governance vote power of an address at the latest block, including\\n     * all delegations made to it.\\n     * @param _who The address being queried.\\n     * @return Governance vote power of `account` at the lastest block.\\n     */\\n    function getVotes(address _who) external view returns (uint256);\\n\\n    /**\\n     * Gets the address an account is delegating its governance vote power to, at a given block number.\\n     * @param _who The address being queried.\\n     * @param _blockNumber The block number at which to fetch the address.\\n     * @return Address where `_who` was delegating its governance vote power at block `_blockNumber`.\\n     */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n     * Gets the address an account is delegating its governance vote power to, at the latest block number.\\n     * @param _who The address being queried.\\n     * @return Address where `_who` is currently delegating its governance vote power.\\n     */\\n    function getDelegateOfAtNow(address _who) external view returns (address);\\n}\\n\",\"keccak256\":\"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirror.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"./IPChainVotePower.sol\\\";\\nimport \\\"./IPChainStakeMirrorVerifier.sol\\\";\\n\\n\\n/**\\n * Interface for the `PChainStakeMirror` contract.\\n */\\ninterface IPChainStakeMirror is IPChainVotePower {\\n\\n    /**\\n     * Event emitted when max updates per block is set.\\n     * @param maxUpdatesPerBlock new number of max updated per block\\n     */\\n    event MaxUpdatesPerBlockSet(uint256 maxUpdatesPerBlock);\\n\\n    /**\\n     * Event emitted when the stake is confirmed.\\n     * @param owner The address who opened the stake.\\n     * @param nodeId Node id to which the stake was added.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     * @param pChainTxId P-chain transaction id.\\n     */\\n    event StakeConfirmed(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei,\\n        bytes32 pChainTxId\\n    );\\n\\n    /**\\n     * Event emitted when the stake has ended.\\n     * @param owner The address whose stake has ended.\\n     * @param nodeId Node id from which the stake was removed.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     */\\n    event StakeEnded(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei\\n    );\\n\\n    /**\\n     * Event emitted when the stake was revoked.\\n     * @param owner The address whose stake has ended.\\n     * @param nodeId Node id from which the stake was removed.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     */\\n    event StakeRevoked(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei\\n    );\\n\\n    /**\\n     * Method for P-chain stake mirroring using `PChainStake` data and Merkle proof.\\n     * @param _stakeData Information about P-chain stake.\\n     * @param _merkleProof Merkle proof that should be used to prove the P-chain stake.\\n     */\\n    function mirrorStake(\\n        IPChainStakeMirrorVerifier.PChainStake calldata _stakeData,\\n        bytes32[] calldata _merkleProof\\n    )\\n        external;\\n\\n    /**\\n     * Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored.\\n     * @param _txId P-chain stake transaction id.\\n     * @param _inputAddress P-chain address that opened stake.\\n     * @return True if stake is active and mirrored.\\n     */\\n    function isActiveStakeMirrored(bytes32 _txId, bytes20 _inputAddress) external view returns(bool);\\n\\n    /**\\n     * Total amount of tokens at current block.\\n     * @return The current total amount of tokens.\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried.\\n     * @return The total amount of tokens at `_blockNumber`.\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Queries the token balance of `_owner` at current block.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @return The current balance.\\n     **/\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirrorVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\n/**\\n * Interface with structure for P-chain stake mirror verifications.\\n */\\ninterface IPChainStakeMirrorVerifier {\\n\\n    /**\\n     * Structure describing the P-chain stake.\\n     */\\n    struct PChainStake {\\n        // Hash of the transaction on the underlying chain.\\n        bytes32 txId;\\n        // Type of the staking/delegation transaction: '0' for 'ADD_VALIDATOR_TX' and '1' for 'ADD_DELEGATOR_TX'.\\n        uint8 stakingType;\\n        // Input address that triggered the staking or delegation transaction.\\n        // See https://support.avax.network/en/articles/4596397-what-is-an-address for address definition for P-chain.\\n        bytes20 inputAddress;\\n        // NodeID to which staking or delegation is done.\\n        // For definitions, see https://github.com/ava-labs/avalanchego/blob/master/ids/node_id.go.\\n        bytes20 nodeId;\\n        // Start time of the staking/delegation in seconds (Unix epoch).\\n        uint64 startTime;\\n        // End time of the staking/delegation in seconds (Unix epoch).\\n        uint64 endTime;\\n        // Staked or delegated amount in Gwei (nano FLR).\\n        uint64 weight;\\n    }\\n}\\n\",\"keccak256\":\"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * Interface for the vote power part of the `PChainStakeMirror` contract.\\n */\\ninterface IPChainVotePower {\\n\\n    /**\\n     * Event triggered when a stake is confirmed or at the time it ends.\\n     * Definition: `votePowerFromTo(owner, nodeId)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * @param owner The account that has changed the amount of vote power it is staking.\\n     * @param nodeId The node id whose received vote power has changed.\\n     * @param priorVotePower The vote power originally on that node id.\\n     * @param newVotePower The new vote power that triggered this event.\\n     */\\n    event VotePowerChanged(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        uint256 priorVotePower,\\n        uint256 newVotePower\\n    );\\n\\n    /**\\n     * Emitted when a vote power cache entry is created.\\n     * Allows history cleaners to track vote power cache cleanup opportunities off-chain.\\n     * @param nodeId The node id whose vote power has just been cached.\\n     * @param blockNumber The block number at which the vote power has been cached.\\n     */\\n    event VotePowerCacheCreated(bytes20 nodeId, uint256 blockNumber);\\n\\n    /**\\n    * Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.\\n    * @param _owner The node id to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(bytes20 _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n    * Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n\\n    /**\\n    * Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Get the amounts and node ids being staked to by a vote power owner.\\n     * @param _owner The address being queried.\\n     * @return _nodeIds Array of node ids.\\n     * @return _amounts Array of staked amounts, for each node id.\\n     */\\n    function stakesOf(address _owner)\\n        external view\\n        returns (\\n            bytes20[] memory _nodeIds,\\n            uint256[] memory _amounts\\n        );\\n\\n    /**\\n     * Get the amounts and node ids being staked to by a vote power owner,\\n     * at a given block.\\n     * @param _owner The address being queried.\\n     * @param _blockNumber The block number being queried.\\n     * @return _nodeIds Array of node ids.\\n     * @return _amounts Array of staked amounts, for each node id.\\n     */\\n    function stakesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view\\n        returns (\\n            bytes20[] memory _nodeIds,\\n            uint256[] memory _amounts\\n        );\\n\\n    /**\\n     * Get the current vote power of `_nodeId`.\\n     * @param _nodeId The node id to get voting power.\\n     * @return Current vote power of `_nodeId`.\\n     */\\n    function votePowerOf(bytes20 _nodeId) external view returns(uint256);\\n\\n    /**\\n    * Get the vote power of `_nodeId` at block `_blockNumber`\\n    * @param _nodeId The node id to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_nodeId` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(bytes20 _nodeId, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * Get current staked vote power from `_owner` staked to `_nodeId`.\\n    * @param _owner Address of vote power owner.\\n    * @param _nodeId Node id.\\n    * @return The staked vote power.\\n    */\\n    function votePowerFromTo(address _owner, bytes20 _nodeId) external view returns(uint256);\\n\\n    /**\\n    * Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`.\\n    * @param _owner Address of vote power owner.\\n    * @param _nodeId Node id.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The staked vote power.\\n    */\\n    function votePowerFromToAt(address _owner, bytes20 _nodeId, uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several node ids in a batch.\\n     * @param _nodeIds The list of node ids to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */\\n    function batchVotePowerOfAt(\\n        bytes20[] memory _nodeIds,\\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../infrastructure/userInterfaces/IPChainStakeMirror.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\n/**\\n * Internal interface for contracts delegating their governance vote power.\\n */\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Emitted when a delegate's vote power changes, as a result of a new delegation\\n     * or a token transfer, for example.\\n     *\\n     * The event is always emitted from a `GovernanceVotePower` contract.\\n     * @param delegate The account receiving the changing delegated vote power.\\n     * @param previousBalance Delegated vote power before the change.\\n     * @param newBalance Delegated vote power after the change.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * Emitted when an account starts delegating vote power or switches its delegation\\n     * to another address.\\n     *\\n     * The event is always emitted from a `GovernanceVotePower` contract.\\n     * @param delegator Account delegating its vote power.\\n     * @param fromDelegate Account receiving the delegation before the change.\\n     * Can be address(0) if there was no previous delegation.\\n     * @param toDelegate Account receiving the delegation after the change.\\n     * Can be address(0) if `delegator` just undelegated all its vote power.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update governance vote power of all involved delegates after tokens are transferred.\\n     *\\n     * This function **MUST** be called after each governance token transfer for the\\n     * delegates to reflect the correct balance.\\n     * @param _from Source address of the transfer.\\n     * @param _to Destination address of the transfer.\\n     * @param _fromBalance _Ignored._\\n     * @param _toBalance _Ignored._\\n     * @param _amount Amount being transferred.\\n     */\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased.\\n     * History before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be lower than the current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     * @param _cleanerContract Address of the cleanup contract.\\n     * Usually this will be an instance of `CleanupBlockNumberManager`.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * Get the token that this governance vote power contract belongs to.\\n     * @return The IVPToken interface owning this contract.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    /**\\n     * Get the stake mirror contract that this governance vote power contract belongs to.\\n     * @return The IPChainStakeMirror interface owning this contract.\\n     */\\n    function pChainStakeMirror() external view returns (IPChainStakeMirror);\\n\\n    /**\\n     * Get the current cleanup block number set with `setCleanupBlockNumber()`.\\n     * @return The currently set cleanup block number.\\n     */\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x5388cd6705f08a9d7a82be3d4c1aea3266df20eb5263b9f5ecf95e73338dc595\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transfered.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache).\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked.\\n    */\\n    function votePowerOfAtIgnoringRevocation(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eb8619a51e0e00a93b32055e4f43d64f050b129e31bf0e161584d79cfbc5dc7\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x49a647d1e8c394320c337b09f14b0ca70f43b0a1327233ddd9b8dcf7f005f92e\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Undelegate all percentage delegations from the sender and then delegate corresponding \\n     *   `_bips` percentage of voting power from the sender to each member of `_delegatees`.\\n     * @param _delegatees The addresses of the new recipients.\\n     * @param _bips The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Total of all `_bips` values must be at most 10000.\\n     **/\\n    function batchDelegate(address[] memory _delegatees, uint256[] memory _bips) external;\\n        \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked.\\n    */\\n    function votePowerOfAtIgnoringRevocation(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0x5f9c189f84f8477b11db5b520229022d4f46097e1f8fd20888ff1d29b5908c4c\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\nimport \\\"../extension/ContractMetadata.sol\\\";\\nimport \\\"../extension/Multicall.sol\\\";\\nimport \\\"../extension/Ownable.sol\\\";\\nimport \\\"../extension/interface/IMintableERC20.sol\\\";\\nimport \\\"../extension/interface/IBurnableERC20.sol\\\";\\n\\n/**\\n *  The `ERC20Base` smart contract implements the ERC20 standard.\\n *  It includes the following additions to standard ERC20 logic:\\n *\\n *      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.\\n *\\n *      - Ownership of the contract, with the ability to restrict certain functions to\\n *        only be called by the contract's owner.\\n *\\n *      - Multicall capability to perform multiple actions atomically\\n *\\n *      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\\n *                             presenting a message signed by the account.\\n */\\n\\ncontract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit, IMintableERC20, IBurnableERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _defaultAdmin, string memory _name, string memory _symbol) ERC20Permit(_name, _symbol) {\\n        _setupOwner(_defaultAdmin);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Minting logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice          Lets an authorized address mint tokens to a recipient.\\n     *  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\\n     *\\n     *  @param _to       The recipient of the tokens to mint.\\n     *  @param _amount   Quantity of tokens to mint.\\n     */\\n    function mintTo(address _to, uint256 _amount) public virtual {\\n        require(_canMint(), \\\"Not authorized to mint.\\\");\\n        require(_amount != 0, \\\"Minting zero tokens.\\\");\\n\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     *  @notice          Lets an owner a given amount of their tokens.\\n     *  @dev             Caller should own the `_amount` of tokens.\\n     *\\n     *  @param _amount   The number of tokens to burn.\\n     */\\n    function burn(uint256 _amount) external virtual {\\n        require(balanceOf(msg.sender) >= _amount, \\\"not enough balance\\\");\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     *  @notice          Lets an owner burn a given amount of an account's tokens.\\n     *  @dev             `_account` should own the `_amount` of tokens.\\n     *\\n     *  @param _account  The account to burn tokens from.\\n     *  @param _amount   The number of tokens to burn.\\n     */\\n    function burnFrom(address _account, uint256 _amount) external virtual override {\\n        require(_canBurn(), \\\"Not authorized to burn.\\\");\\n        require(balanceOf(_account) >= _amount, \\\"not enough balance\\\");\\n        uint256 decreasedAllowance = allowance(_account, msg.sender) - _amount;\\n        _approve(_account, msg.sender, 0);\\n        _approve(_account, msg.sender, decreasedAllowance);\\n        _burn(_account, _amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Internal (overrideable) functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether tokens can be minted in the given execution context.\\n    function _canMint() internal view virtual returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether tokens can be burned in the given execution context.\\n    function _canBurn() internal view virtual returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @notice Returns the sender in the given execution context.\\n    function _msgSender() internal view override(Multicall, Context) returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x1d15b80763249bb85880f4d5864d7ffb11759daf725e0274287e679cf8eef4d7\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Metadata interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/extension/ContractMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /// @dev The sender is not authorized to perform the action\\n    error ContractMetadataUnauthorized();\\n\\n    /// @notice Returns the contract metadata URI.\\n    string public override contractURI;\\n\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert ContractMetadataUnauthorized();\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        string memory prevURI = contractURI;\\n        contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x0752a8a6eeb7e61acfe50e39344c16258a89cfaa55fc9db9289dc6e18ae7af66\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/Address.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        address sender = _msgSender();\\n        bool isForwarder = msg.sender != sender;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (isForwarder) {\\n                results[i] = Address.functionDelegateCall(address(this), abi.encodePacked(data[i], sender));\\n            } else {\\n                results[i] = Address.functionDelegateCall(address(this), data[i]);\\n            }\\n        }\\n        return results;\\n    }\\n\\n    /// @notice Returns the sender in the given execution context.\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\"},\"@thirdweb-dev/contracts/extension/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IOwnable.sol\\\";\\n\\n/**\\n *  @title   Ownable\\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *           information about who the contract's owner is.\\n */\\n\\nabstract contract Ownable is IOwnable {\\n    /// @dev The sender is not authorized to perform the action\\n    error OwnableUnauthorized();\\n\\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\\n    address private _owner;\\n\\n    /// @dev Reverts if caller is not the owner.\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) {\\n            revert OwnableUnauthorized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Returns the owner of the contract.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     *  @notice Lets an authorized wallet set a new owner for the contract.\\n     *  @param _newOwner The address to set as the new owner of the contract.\\n     */\\n    function setOwner(address _newOwner) external override {\\n        if (!_canSetOwner()) {\\n            revert OwnableUnauthorized();\\n        }\\n        _setupOwner(_newOwner);\\n    }\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        address _prevOwner = _owner;\\n        _owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xd5edceecc8eee7460707d4c078f8273e8e488ab76cd2dcfaab36bd48e7f8bfaa\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/TokenBundle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/ITokenBundle.sol\\\";\\nimport { CurrencyTransferLib } from \\\"../lib/CurrencyTransferLib.sol\\\";\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n *  @title   Token Bundle\\n *  @notice  `TokenBundle` contract extension allows bundling-up of ERC20/ERC721/ERC1155 and native-tokan assets\\n *           in a data structure, and provides logic for setting/getting IDs and URIs for created bundles.\\n *  @dev     See {ITokenBundle}\\n */\\n\\nabstract contract TokenBundle is ITokenBundle {\\n    /// @dev Mapping from bundle UID => bundle info.\\n    mapping(uint256 => BundleInfo) private bundle;\\n\\n    /// @dev Returns the total number of assets in a particular bundle.\\n    function getTokenCountOfBundle(uint256 _bundleId) public view returns (uint256) {\\n        return bundle[_bundleId].count;\\n    }\\n\\n    /// @dev Returns an asset contained in a particular bundle, at a particular index.\\n    function getTokenOfBundle(uint256 _bundleId, uint256 index) public view returns (Token memory) {\\n        return bundle[_bundleId].tokens[index];\\n    }\\n\\n    /// @dev Returns the uri of a particular bundle.\\n    function getUriOfBundle(uint256 _bundleId) public view returns (string memory) {\\n        return bundle[_bundleId].uri;\\n    }\\n\\n    /// @dev Lets the calling contract create a bundle, by passing in a list of tokens and a unique id.\\n    function _createBundle(Token[] calldata _tokensToBind, uint256 _bundleId) internal {\\n        uint256 targetCount = _tokensToBind.length;\\n\\n        require(targetCount > 0, \\\"!Tokens\\\");\\n        require(bundle[_bundleId].count == 0, \\\"id exists\\\");\\n\\n        for (uint256 i = 0; i < targetCount; i += 1) {\\n            _checkTokenType(_tokensToBind[i]);\\n            bundle[_bundleId].tokens[i] = _tokensToBind[i];\\n        }\\n\\n        bundle[_bundleId].count = targetCount;\\n    }\\n\\n    /// @dev Lets the calling contract update a bundle, by passing in a list of tokens and a unique id.\\n    function _updateBundle(Token[] memory _tokensToBind, uint256 _bundleId) internal {\\n        require(_tokensToBind.length > 0, \\\"!Tokens\\\");\\n\\n        uint256 currentCount = bundle[_bundleId].count;\\n        uint256 targetCount = _tokensToBind.length;\\n        uint256 check = currentCount > targetCount ? currentCount : targetCount;\\n\\n        for (uint256 i = 0; i < check; i += 1) {\\n            if (i < targetCount) {\\n                _checkTokenType(_tokensToBind[i]);\\n                bundle[_bundleId].tokens[i] = _tokensToBind[i];\\n            } else if (i < currentCount) {\\n                delete bundle[_bundleId].tokens[i];\\n            }\\n        }\\n\\n        bundle[_bundleId].count = targetCount;\\n    }\\n\\n    /// @dev Lets the calling contract add a token to a bundle for a unique bundle id and index.\\n    function _addTokenInBundle(Token memory _tokenToBind, uint256 _bundleId) internal {\\n        _checkTokenType(_tokenToBind);\\n        uint256 id = bundle[_bundleId].count;\\n\\n        bundle[_bundleId].tokens[id] = _tokenToBind;\\n        bundle[_bundleId].count += 1;\\n    }\\n\\n    /// @dev Lets the calling contract update a token in a bundle for a unique bundle id and index.\\n    function _updateTokenInBundle(Token memory _tokenToBind, uint256 _bundleId, uint256 _index) internal {\\n        require(_index < bundle[_bundleId].count, \\\"index DNE\\\");\\n        _checkTokenType(_tokenToBind);\\n        bundle[_bundleId].tokens[_index] = _tokenToBind;\\n    }\\n\\n    /// @dev Checks if the type of asset-contract is same as the TokenType specified.\\n    function _checkTokenType(Token memory _token) internal view {\\n        if (_token.tokenType == TokenType.ERC721) {\\n            try IERC165(_token.assetContract).supportsInterface(0x80ac58cd) returns (bool supported721) {\\n                require(supported721, \\\"!TokenType\\\");\\n            } catch {\\n                revert(\\\"!TokenType\\\");\\n            }\\n        } else if (_token.tokenType == TokenType.ERC1155) {\\n            try IERC165(_token.assetContract).supportsInterface(0xd9b67a26) returns (bool supported1155) {\\n                require(supported1155, \\\"!TokenType\\\");\\n            } catch {\\n                revert(\\\"!TokenType\\\");\\n            }\\n        } else if (_token.tokenType == TokenType.ERC20) {\\n            if (_token.assetContract != CurrencyTransferLib.NATIVE_TOKEN) {\\n                // 0x36372b07\\n                try IERC165(_token.assetContract).supportsInterface(0x80ac58cd) returns (bool supported721) {\\n                    require(!supported721, \\\"!TokenType\\\");\\n\\n                    try IERC165(_token.assetContract).supportsInterface(0xd9b67a26) returns (bool supported1155) {\\n                        require(!supported1155, \\\"!TokenType\\\");\\n                    } catch Error(string memory) {} catch {}\\n                } catch Error(string memory) {} catch {}\\n            }\\n        }\\n    }\\n\\n    /// @dev Lets the calling contract set/update the uri of a particular bundle.\\n    function _setUriOfBundle(string memory _uri, uint256 _bundleId) internal {\\n        bundle[_bundleId].uri = _uri;\\n    }\\n\\n    /// @dev Lets the calling contract delete a particular bundle.\\n    function _deleteBundle(uint256 _bundleId) internal {\\n        for (uint256 i = 0; i < bundle[_bundleId].count; i += 1) {\\n            delete bundle[_bundleId].tokens[i];\\n        }\\n        bundle[_bundleId].count = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0f14ee2261baa4c4ede0ceacf8a573c900aeb8a7dcb28480f812f583402c42a6\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IBurnableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IBurnableERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x7098224c3bdcc1ec2e384c035b2f0853232696b4fae77df25919b1c19c033272\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\",\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IMintableERC20 {\\n    /// @dev Emitted when tokens are minted with `mintTo`\\n    event TokensMinted(address indexed mintedTo, uint256 quantityMinted);\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mintTo(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd0b56f9f9d665684156294bb479ce09d6ad3cc4f4bebc246064098a9e767642e\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/extension/interface/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/ITokenBundle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Group together arbitrary ERC20, ERC721 and ERC1155 tokens into a single bundle.\\n *\\n *  The `Token` struct is a generic type that can describe any ERC20, ERC721 or ERC1155 token.\\n *  The `Bundle` struct is a data structure to track a group/bundle of multiple assets i.e. ERC20,\\n *  ERC721 and ERC1155 tokens, each described as a `Token`.\\n *\\n *  Expressing tokens as the `Token` type, and grouping them as a `Bundle` allows for writing generic\\n *  logic to handle any ERC20, ERC721 or ERC1155 tokens.\\n */\\n\\ninterface ITokenBundle {\\n    /// @notice The type of assets that can be wrapped.\\n    enum TokenType {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    /**\\n     *  @notice A generic interface to describe any ERC20, ERC721 or ERC1155 token.\\n     *\\n     *  @param assetContract The contract address of the asset.\\n     *  @param tokenType     The token type (ERC20 / ERC721 / ERC1155) of the asset.\\n     *  @param tokenId       The token Id of the asset, if the asset is an ERC721 / ERC1155 NFT.\\n     *  @param totalAmount   The amount of the asset, if the asset is an ERC20 / ERC1155 fungible token.\\n     */\\n    struct Token {\\n        address assetContract;\\n        TokenType tokenType;\\n        uint256 tokenId;\\n        uint256 totalAmount;\\n    }\\n\\n    /**\\n     *  @notice An internal data structure to track a group / bundle of multiple assets i.e. `Token`s.\\n     *\\n     *  @param count    The total number of assets i.e. `Token` in a bundle.\\n     *  @param uri      The (metadata) URI assigned to the bundle created\\n     *  @param tokens   Mapping from a UID -> to a unique asset i.e. `Token` in the bundle.\\n     */\\n    struct BundleInfo {\\n        uint256 count;\\n        string uri;\\n        mapping(uint256 => Token) tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x4b575f4d82b4cb77b48262e2bffcc15497e52d21c38ba5614668a9cd29540949\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../eip/interface/IERC20.sol\\\";\\nimport \\\"../../../../eip/interface/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0x541806757302ea976b52d48ff7df59f50ec72c10684254e4f17c181f46fd381f\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../eip/interface/IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    address private immutable _CACHED_THIS;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_THIS = address(this);\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR(), structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name())),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../eip/interface/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../lib/Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x2f1ee59fbdefde38381074fcd365a919dbd9ab6d6240e07b1753961f8e6fcd3b\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/infra/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\n/// @author thirdweb, OpenZeppelin Contracts (v4.9.0)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../infra/interface/IWETH.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    error CurrencyTransferLibMismatchedValue(uint256 expected, uint256 actual);\\n    error CurrencyTransferLibFailedNativeTransfer(address recipient, uint256 value);\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                if (_amount != msg.value) {\\n                    revert CurrencyTransferLibMismatchedValue(msg.value, _amount);\\n                }\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            revert CurrencyTransferLibFailedNativeTransfer(to, value);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(address to, uint256 value, address _nativeTokenWrapper) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92d751d69f2bda27379e1dd903eb4fbdd7cbaa1bce4bebe492405b9bb9a04395\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {\\n\\n            } iszero(eq(raw, end)) {\\n\\n            } {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\"},\"contracts/Collateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { TokenBundle, ITokenBundle } from \\\"@thirdweb-dev/contracts/extension/TokenBundle.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\\\";\\nimport \\\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IETFToken } from \\\"./SimpleERC20.sol\\\";\\nimport { console } from \\\"hardhat/console.sol\\\";\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\ncontract CollateralVault {\\n\\taddress public flareContractRegistry;\\n\\tuint256 public collateralRatio;\\n\\taddress public minter;\\n\\tstring public symbolSynthetic;\\n\\tuint256 public mintSyntheticPrice;\\n\\tuint256 public amountCollateral;\\n\\tuint256 public syntethicTokenBalance;\\n\\taddress public owner;\\n\\n\\tstring public symbolCollateral = \\\"FLR22\\\";\\n\\taddress public collateralToken = NATIVE_TOKEN;\\n\\tuint256 public mintCollateralPrice = 1;\\n\\tuint256 public lockingPeriod = 1 days;\\n\\n\\tevent MinterAmount(address minter, uint256 amount);\\n\\tevent OwnerAmount(address owner, uint256 amount);\\n\\n\\tconstructor(\\n\\t\\taddress _flareContractRegistry,\\n\\t\\tstring memory _symbolSynthetic,\\n\\t\\tstring memory _symbolCollateral,\\n\\t\\tuint256 _collateralRatio,\\n\\t\\tuint256 _amountCollateral,\\n\\t\\tuint256 _lockingPeriod\\n\\t) payable {\\n\\t\\trequire(msg.value >= _amountCollateral, \\\"Insufficient collateral2\\\");\\n\\t\\tminter = msg.sender;\\n\\t\\tflareContractRegistry = _flareContractRegistry;\\n\\t\\tsymbolSynthetic = _symbolSynthetic;\\n\\t\\tsymbolCollateral = _symbolCollateral;\\n\\t\\tcollateralRatio = _collateralRatio;\\n\\t\\tlockingPeriod = _lockingPeriod;\\n\\t\\tamountCollateral = _amountCollateral;\\n\\t\\towner = msg.sender;\\n\\t\\tmint(_amountCollateral);\\n\\t}\\n\\n\\tfunction setOwner(address _owner) public {\\n\\t\\trequire(msg.sender == owner, \\\"Only the owner can set the owner\\\");\\n\\t\\towner = _owner;\\n\\t}\\n\\n\\tfunction setMinter(address _minter) public {\\n\\t\\trequire(msg.sender == owner, \\\"Only the owner can set the minter\\\");\\n\\t\\tminter = _minter;\\n\\t}\\n\\n\\tfunction getCollateralToSyntheticConversion(\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\t// uint256 decimalPriceDifference = 18 - 5;\\n\\n\\t\\t(uint256 currentSyntheticPrice, , ) = getTokenPriceWei(symbolSynthetic);\\n\\n\\t\\t(uint256 currentCollateralTokenPrice, , ) = getTokenPriceWei(\\n\\t\\t\\tsymbolCollateral\\n\\t\\t);\\n\\t\\tuint256 normalizedAmount = amount; // (10 ** decimalPriceDifference);\\n\\t\\treturn\\n\\t\\t\\t(currentCollateralTokenPrice * normalizedAmount) /\\n\\t\\t\\tcurrentSyntheticPrice;\\n\\t}\\n\\n\\tfunction mint(uint256 _amountCollateral) private {\\n\\t\\tuint256 collaterisableAmount = (_amountCollateral * collateralRatio) /\\n\\t\\t\\t100;\\n\\n\\t\\tuint256 _amountSynthetic = getCollateralToSyntheticConversion(\\n\\t\\t\\tcollaterisableAmount\\n\\t\\t);\\n\\t\\t(mintSyntheticPrice, , ) = getTokenPriceWei(symbolSynthetic);\\n\\n\\t\\tsyntethicTokenBalance = _amountSynthetic;\\n\\t}\\n\\n\\tfunction getCurrentValue() public view returns (uint256) {\\n\\t\\t(uint256 currentSyntheticPrice, , ) = getTokenPriceWei(symbolSynthetic);\\n\\t\\tuint256 valueSynthetic = syntethicTokenBalance * currentSyntheticPrice;\\n\\t\\t// add 5 decimals to the value\\n\\t\\tvalueSynthetic = valueSynthetic / (10 ** 5);\\n\\t\\treturn valueSynthetic;\\n\\t}\\n\\n\\tfunction burn() public {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner,\\n\\t\\t\\t\\\"Only the owner can burn the synthetic tokens\\\"\\n\\t\\t);\\n\\t\\trequire(block.timestamp > lockingPeriod, \\\"Locking period not over yet\\\");\\n\\n\\t\\tuint256 valueSynthetic = getCurrentValue();\\n\\n\\t\\tuint256 amountCollateralToWithdrawToOwner = Math.min(\\n\\t\\t\\tamountCollateral,\\n\\t\\t\\tvalueSynthetic\\n\\t\\t);\\n\\n\\t\\tpayable(owner).transfer(amountCollateralToWithdrawToOwner);\\n\\t\\temit OwnerAmount(owner, amountCollateralToWithdrawToOwner);\\n\\n\\n\\t\\tif (address(this).balance > 0) {\\n\\t\\t\\temit MinterAmount(minter, address(this).balance);\\n\\t\\t\\tpayable(minter).transfer(address(this).balance);\\n\\t\\t} else {\\n\\t\\t\\temit MinterAmount(minter, 0);\\n\\t\\t}\\n\\t\\tsyntethicTokenBalance = 0;\\n\\t}\\n\\n\\tfunction getTokenPriceWei(\\n\\t\\tstring memory _symbol\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256 _price, uint256 _timestamp, uint256 _decimals)\\n\\t{\\n\\t\\tIFlareContractRegistry contractRegistry = IFlareContractRegistry(\\n\\t\\t\\tflareContractRegistry\\n\\t\\t);\\n\\t\\tIFtsoRegistry ftsoRegistry = IFtsoRegistry(\\n\\t\\t\\tcontractRegistry.getContractAddressByName(\\\"FtsoRegistry\\\")\\n\\t\\t);\\n\\t\\t(_price, _timestamp, _decimals) = ftsoRegistry\\n\\t\\t\\t.getCurrentPriceWithDecimals(_symbol);\\n\\n\\t\\treturn (_price, _timestamp, _decimals);\\n\\t}\\n}\\n\",\"keccak256\":\"0x3fa1fd57c2cce112acffceb0722f517f3a9242d9a8df9a385f7579d2b5ae4d6a\",\"license\":\"MIT\"},\"contracts/ETFLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { CollateralVault } from \\\"./Collateral.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EVMTransaction} from \\\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\\\";\\nimport {FlareContractsRegistryLibrary} from \\\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\\\";\\nimport {IEVMTransactionVerification} from \\\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\\\";\\n\\nstruct Token {\\n    address _address;\\n    uint256 _quantity;\\n    uint256 _chainId;\\n    address _contributor;\\n}\\n\\nstruct Vault {\\n    Token[] _tokens;\\n    VaultState state;\\n}\\n\\nenum VaultState {\\n    EMPTY,\\n    OPEN,\\n    MINTED,\\n    BURNED\\n}\\n\\nstruct EventInfo {\\n    address sender;\\n    uint256 quantity;\\n    uint256 chainId;\\n    address contributor;\\n}\\n\\ncontract ETFLock  {\\n\\taddress public evmVerifierOfFlareTransaction;\\n    Token[] requiredTokens;\\n    uint256 public chainId;\\n    TransactionInfo[] public transactions;\\n\\n\\n    event Deposit(\\n        uint256 _vaultId,\\n        address _address,\\n        uint256 _quantity,\\n        uint256 _chainId,\\n        address _contributor\\n    );\\n\\n    mapping(uint256 => Vault) public vaults;\\n\\n    struct TransactionInfo {\\n    EVMTransaction.Proof originalTransaction;\\n    uint256 eventNumber;\\n    EventInfo[] eventInfo;\\n    }\\n\\n    constructor(address _evmVerifierOfFlareTransaction, uint256 _chainId,\\n        Token[] memory _requiredTokens)\\n    {\\n        evmVerifierOfFlareTransaction = _evmVerifierOfFlareTransaction;\\n        chainId = _chainId;\\n        for (uint256 i = 0; i < _requiredTokens.length; i++) {\\n            requiredTokens.push(_requiredTokens[i]);\\n        }\\n    }\\n\\n\\n    function getVaultStates()\\n        public\\n        view\\n        returns (VaultState[] memory)\\n    {\\n        VaultState[] memory states = new VaultState[](90);\\n        for (uint256 i = 0; i < states.length; i++) {\\n            states[i] = vaults[i].state;\\n        }\\n        return states;\\n    }\\n\\n    function depositLock(\\n        uint256 _vaultId,\\n        Token[] memory _tokens\\n    )\\n        public\\n    {\\n        // require(vaults[_vaultId].state == VaultState.OPEN\\n        //     || vaults[_vaultId].state == VaultState.EMPTY,\\n        //     \\\"Vault is not open or empty\\\"\\n        // );\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            IERC20(_tokens[i]._address).transferFrom(\\n                _tokens[i]._contributor,\\n                address(this),\\n                _tokens[i]._quantity\\n            );\\n            vaults[_vaultId]._tokens.push(_tokens[i]);\\n\\n            emit Deposit(\\n                _vaultId,\\n                _tokens[i]._address,\\n                _tokens[i]._quantity,\\n                _tokens[i]._chainId,\\n                _tokens[i]._contributor\\n            );\\n        }\\n    }\\n\\n\\n    function checkBurn(EVMTransaction.Proof calldata _transaction) external {\\n        require(isEVMTransactionProofValid(_transaction), \\\"Invalid transaction proof\\\");\\n        uint256 transactionIndex = transactions.length;\\n        transactions.push();\\n        transactions[transactionIndex].originalTransaction = _transaction;\\n        transactions[transactionIndex].eventNumber = _transaction.data.responseBody.events.length;\\n        bytes32 eventTopic = keccak256(\\\"Burn(uint256,address)\\\");\\n        for(uint256 i = 0; i < _transaction.data.responseBody.events.length; i++) {\\n            if (_transaction.data.responseBody.events[i].topics[0] == eventTopic) {\\n                (uint256 _vaultId, address _address) = abi.decode(_transaction.data.responseBody.events[i].data, (uint256, address));\\n                vaults[_vaultId].state = VaultState.BURNED;\\n                for (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\\n                    IERC20(vaults[_vaultId]._tokens[j]._address).transfer(\\n                        _address,\\n                        vaults[_vaultId]._tokens[j]._quantity\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function burn (\\n        uint256 _vaultId\\n    )\\n        public\\n    {\\n        for (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\\n            IERC20(vaults[_vaultId]._tokens[j]._address).transfer(\\n                msg.sender,\\n                vaults[_vaultId]._tokens[j]._quantity\\n            );\\n        }\\n    }\\n\\n    function isEVMTransactionProofValid(\\n        EVMTransaction.Proof calldata transaction\\n    ) public view returns (bool) {\\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\\n        return IEVMTransactionVerification(0x0bd4a6D3eFbB0aa8b191AE71E7dfF41c10fe8B9F).verifyEVMTransaction(transaction);\\n    }\\n}\\n\",\"keccak256\":\"0x6579801a8a94ae0144a11beb6263c5c3f240e9f48b8972a666c4f5a7bf20d45e\",\"license\":\"MIT\"},\"contracts/SimpleERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@thirdweb-dev/contracts/base/ERC20Base.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/Ownable.sol\\\";\\n\\ninterface IETFToken {\\n\\tfunction mint(address account, uint256 amount) external;\\n\\tfunction symbol() external view returns (string memory);\\n\\tfunction burn(address account, uint256 amount) external;\\n}\\n\\ncontract SimpleERC20 is ERC20, Ownable {\\n\\n    \\n\\tconstructor(\\n        string memory name,\\n        string memory symbol\\n    ) ERC20(name, symbol) {\\n\\t\\t_setupOwner(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to mint new ETF tokens. Only the owner can mint.\\n\\t *\\n\\t * @param account The address that will receive the minted tokens.\\n\\t * @param amount The amount of tokens to mint.\\n\\t */\\n\\tfunction mint(address account, uint256 amount) external {\\n\\t\\t_mint(account, amount);\\n\\t}\\n\\n\\tfunction burn(address account, uint256 amount) external {\\n\\t\\tsuper._burn(account, amount);\\n\\t}\\n\\n\\tfunction _canSetOwner() internal view virtual override returns (bool) {\\n\\t\\treturn msg.sender == owner();\\n\\t}\\n}\\n\",\"keccak256\":\"0xb69c2d7a753487a9235e481bb8e3b7915a2a45086551395e64fedbd5a80c159d\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200255e3803806200255e833981016040819052620000349162000195565b600080546001600160a01b0319166001600160a01b03851617815560028390555b8151811015620000fa576001828281518110620000765762000076620002b3565b602090810291909101810151825460018082018555600094855293839020825160049092020180546001600160a01b03199081166001600160a01b0393841617825593830151948101949094556040820151600285015560609091015160039093018054909216921691909117905580620000f181620002c9565b91505062000055565b50505050620002f1565b80516001600160a01b03811681146200011c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156200015c576200015c62000121565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200018d576200018d62000121565b604052919050565b60008060006060808587031215620001ac57600080fd5b620001b78562000104565b9350602080860151935060408087015160018060401b0380821115620001dc57600080fd5b818901915089601f830112620001f157600080fd5b81518181111562000206576200020662000121565b62000216858260051b0162000162565b818152858101925060079190911b83018501908b8211156200023757600080fd5b928501925b81841015620002a2576080848d031215620002575760008081fd5b6200026162000137565b6200026c8562000104565b8152868501518782015285850151868201526200028b88860162000104565b81890152835260809390930192918501916200023c565b809750505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600060018201620002ea57634e487b7160e01b600052601160045260246000fd5b5060010190565b61225d80620003016000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634c1e4d3e116100665780634c1e4d3e146100fd57806354af71e5146101105780638c64ea4a1461013b5780639a8a05921461016e5780639ace38c21461018557600080fd5b806309f5dc911461009857806314d1597e146100c0578063309bfe4a146100d557806342966c68146100ea575b600080fd5b6100ab6100a6366004610e0b565b6101a6565b60405190151581526020015b60405180910390f35b6100d36100ce366004610e0b565b610227565b005b6100dd61059d565b6040516100b79190610e84565b6100d36100f8366004610ecf565b610645565b6100d361010b366004610f7e565b61075d565b600054610123906001600160a01b031681565b6040516001600160a01b0390911681526020016100b7565b610161610149366004610ecf565b60046020526000908152604090206001015460ff1681565b6040516100b7919061107d565b61017760025481565b6040519081526020016100b7565b610198610193366004610ecf565b6109d3565b6040516100b792919061128e565b6040516358fbe9e160e01b8152600090730bd4a6d3efbb0aa8b191ae71e7dff41c10fe8b9f906358fbe9e1906101e0908590600401611702565b602060405180830381865afa1580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102219190611872565b92915050565b610230816101a6565b6102805760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207472616e73616374696f6e2070726f6f6600000000000000604482015260640160405180910390fd5b6003805460018101808355600083905290918391839081106102a4576102a461188f565b600091825260209091206010909102016102be8282612041565b506102ce90506020830183611988565b6102dc9060a0810190611b39565b6102eb906101008101906118a5565b9050600382815481106103005761030061188f565b600091825260208220600e60109092020101919091557ff6554c3a5d28e08c120b5a69c7edbaf52f935bd2596a60b8a18e282cd257cddb905b6103466020850185611988565b6103549060a0810190611b39565b610363906101008101906118a5565b9050811015610597578161037a6020860186611988565b6103889060a0810190611b39565b610397906101008101906118a5565b838181106103a7576103a761188f565b90506020028101906103b991906119b5565b6103c79060408101906118a5565b60008181106103d8576103d861188f565b9050602002013503610585576000806103f46020870187611988565b6104029060a0810190611b39565b610411906101008101906118a5565b848181106104215761042161188f565b905060200281019061043391906119b5565b610441906060810190611b7d565b81019061044e91906121de565b6000828152600460205260408120600101805460ff1916600317905591935091505b6000838152600460205260409020548110156105815760008381526004602052604090208054829081106104a6576104a661188f565b6000918252602080832060049283020154868452919052604090912080546001600160a01b039092169163a9059cbb918591859081106104e8576104e861188f565b9060005260206000209060040201600101546040518363ffffffff1660e01b815260040161052b9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e9190611872565b50806105798161220e565b915050610470565b5050505b8061058f8161220e565b915050610339565b50505050565b60408051605a808252610b6082019092526060916000919060208201610b408036833701905050905060005b815181101561063f57600081815260046020526040902060010154825160ff909116908390839081106105fe576105fe61188f565b6020026020010190600381111561061757610617610e4c565b9081600381111561062a5761062a610e4c565b905250806106378161220e565b9150506105c9565b50919050565b60005b60008281526004602052604090205481101561075957600082815260046020526040902080548290811061067e5761067e61188f565b6000918252602080832060049283020154858452919052604090912080546001600160a01b039092169163a9059cbb913391859081106106c0576106c061188f565b9060005260206000209060040201600101546040518363ffffffff1660e01b81526004016107039291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190611872565b50806107518161220e565b915050610648565b5050565b60005b81518110156109ce5781818151811061077b5761077b61188f565b6020026020010151600001516001600160a01b03166323b872dd8383815181106107a7576107a761188f565b602002602001015160600151308585815181106107c6576107c661188f565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190611872565b506000838152600460205260409020825183908390811061086f5761086f61188f565b602090810291909101810151825460018082018555600094855293839020825160049092020180546001600160a01b03199081166001600160a01b0393841617825593830151948101949094556040820151600285015560609091015160039093018054909216921691909117905581517f92c4ae82457b93c1cf331ba7edc25c42b279a02ae829e0c61d148a945eabf6759084908490849081106109165761091661188f565b6020026020010151600001518484815181106109345761093461188f565b6020026020010151602001518585815181106109525761095261188f565b6020026020010151604001518686815181106109705761097061188f565b6020026020010151606001516040516109b49594939291909485526001600160a01b0393841660208601526040850192909252606084015216608082015260a00190565b60405180910390a1806109c68161220e565b915050610760565b505050565b600381815481106109e357600080fd5b6000918252602091829020604080516010909302909101805460609481028401850183529183018281529094509192849284929091849190840182828015610a4a57602002820191906000526020600020905b815481526020019060010190808311610a36575b50505091835250506040805160c0810182526001840180548252600285015460208381019190915260038601546001600160401b0380821685870152600160401b90910416606080850191909152845160a0810186526004880180548252600589015461ffff81168386015260ff62010000820481161515848a01526301000000909104161515928201929092526006880180548751818602810186019098528088529784019795969495608080890196939590860193929190830182828015610b5f57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610b225790505b50505091909252505050815260408051610120810182526006840180546001600160401b038082168452600160401b9091041660208084019190915260078601546001600160a01b0380821695850195909552600160a01b900460ff161515606084015260088601549093166080830152600985015460a0830152600a8501805493909401939192909160c0840191610bf790611bc3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2390611bc3565b8015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b5050509183525050600582015460ff16602080830191909152600683018054604080518285028101850182528281529401939260009084015b82821015610df55760008481526020908190206040805160a08101825260048602909201805463ffffffff8116845264010000000090046001600160a01b0316838501526001810180548351818702810187018552818152949592949386019392830182828015610d3957602002820191906000526020600020905b815481526020019060010190808311610d25575b50505050508152602001600282018054610d5290611bc3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7e90611bc3565b8015610dcb5780601f10610da057610100808354040283529160200191610dcb565b820191906000526020600020905b815481529060010190602001808311610dae57829003601f168201915b50505091835250506003919091015460ff1615156020918201529082526001929092019101610ca9565b50505091525050905250905250600e9091015482565b600060208284031215610e1d57600080fd5b81356001600160401b03811115610e3357600080fd5b820160408185031215610e4557600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b60048110610e8057634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015610ec357610eb3838551610e62565b9284019291840191600101610ea0565b50909695505050505050565b600060208284031215610ee157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610f2057610f20610ee8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610f4e57610f4e610ee8565b604052919050565b6001600160a01b0381168114610f6b57600080fd5b50565b8035610f7981610f56565b919050565b6000806040808486031215610f9257600080fd5b833592506020808501356001600160401b0380821115610fb157600080fd5b818701915087601f830112610fc557600080fd5b813581811115610fd757610fd7610ee8565b610fe5848260051b01610f26565b818152848101925060079190911b83018401908982111561100557600080fd5b928401925b8184101561106d576080848b0312156110235760008081fd5b61102b610efe565b843561103681610f56565b81528486013586820152868501358782015260608086013561105781610f56565b908201528352608093909301929184019161100a565b8096505050505050509250929050565b602081016102218284610e62565b600081518084526020808501945080840160005b838110156110bb5781518752958201959082019060010161109f565b509495945050505050565b6000815180845260005b818110156110ec576020818501810151868301820152016110d0565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b858110156111af5782840389528151805163ffffffff168552858101516001600160a01b03168686015260408082015160a082880181905291906111708389018261108b565b925050506060808301518783038289015261118b83826110c6565b6080948501511515989094019790975250509885019893509084019060010161112a565b5091979650505050505050565b80516001600160401b03168252600061012060208301516111e860208601826001600160401b03169052565b50604083015161120360408601826001600160a01b03169052565b506060830151611217606086018215159052565b50608083015161123260808601826001600160a01b03169052565b5060a083015160a085015260c08301518160c0860152611254828601826110c6565b91505060e083015161126b60e086018260ff169052565b506101008084015185830382870152611284838261110c565b9695505050505050565b60006040808352845181828501526112a9608085018261108b565b9050602080870151603f19868403016060870152805183528181015182840152838101516001600160401b03808216868601528060608401511660608601525050608081015160c060808501526101608401815160c086015261ffff848301511660e0860152858201511515610100860152606082015115156101208601526080820151955060a06101408601528091508551808252610180860192508487019650600091505b8082101561137657865163ffffffff168352958401959184019160019190910190611350565b505060a0820151945083810360a085015261139181866111bc565b9550505085818601525050509392505050565b6000808335601e198436030181126113bb57600080fd5b83016020810192503590506001600160401b038111156113da57600080fd5b8060051b36038213156113ec57600080fd5b9250929050565b81835260006001600160fb1b0383111561140c57600080fd5b8260051b80836020870137939093016020019392505050565b6001600160401b0381168114610f6b57600080fd5b8035610f7981611425565b60008235609e1983360301811261145b57600080fd5b90910192915050565b61ffff81168114610f6b57600080fd5b8015158114610f6b57600080fd5b8035610f7981611474565b63ffffffff81168114610f6b57600080fd5b6000823561011e1983360301811261145b57600080fd5b6000808335601e198436030181126114cd57600080fd5b83016020810192503590506001600160401b038111156114ec57600080fd5b8036038213156113ec57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff81168114610f6b57600080fd5b8035610f7981611524565b81835260006020808501808196508560051b810191508460005b878110156111af57828403895261156f8288611445565b60a0813561157c8161148d565b63ffffffff1686528187013561159181610f56565b6001600160a01b03168688015260406115ac838201846113a4565b83838a01526115be848a0182846113f3565b935050505060606115d1818401846114b6565b888403838a01526115e38482846114fb565b935050505060808083013592506115f983611474565b91151595909101949094529784019790840190600101611558565b6000610120611633846116268561143a565b6001600160401b03169052565b61163f6020840161143a565b6001600160401b0316602085015261165960408401610f6e565b6001600160a01b0316604085015261167360608401611482565b1515606085015261168660808401610f6e565b6001600160a01b0316608085015260a083810135908501526116ab60c08401846114b6565b8260c08701526116be83870182846114fb565b925050506116ce60e08401611533565b60ff1660e08501526101006116e5848201856113a4565b868403838801526116f784828461153e565b979650505050505050565b6000602080835261171384856113a4565b6040838601526117276060860182846113f3565b9150508185013560be1986360301811261174057600080fd5b8581019050601f19858303016040860152803582528281013583830152604081013561176b81611425565b6001600160401b03908116604084015260608201359061178a82611425565b16606083015261179d6080820182611445565b60c060808401526101608301813560c0850152848201356117bd81611464565b61ffff1660e085015260408201356117d481611474565b151561010085015260608201356117ea81611474565b15156101208501526117ff60808301836113a4565b60a061014087015291829052909150600061018085015b838210156118435782356118298161148d565b63ffffffff16815291860191600191909101908601611816565b61185060a086018661149f565b965085810360a08701526118648188611614565b9a9950505050505050505050565b60006020828403121561188457600080fd5b8151610e4581611474565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126118bc57600080fd5b8301803591506001600160401b038211156118d657600080fd5b6020019150600581901b36038213156113ec57600080fd5b634e487b7160e01b600052601160045260246000fd5b8054600080835581156109ce57828152602081208281015b808210156119325782825560018201915061191c565b5050505050565b600160401b82111561194d5761194d610ee8565b8054828255808310156109ce576000828152602081208481019083015b808210156119805782825560018201915061196a565b505050505050565b6000823560be1983360301811261199e57600080fd5b9190910192915050565b6000813561022181611425565b60008235609e1983360301811261199e57600080fd5b6000813561022181611474565b5b8181101561075957600081556001016119d9565b600160401b821115611a0157611a01610ee8565b8054828255808310156109ce578160005260206000206007840160031c8101601c8560021b168015611a44576000198083018054828460200360031b1c16815550505b506119326007840160031c8301826119d8565b600081356102218161148d565b6001600160401b03831115611a7b57611a7b610ee8565b611a8583826119ed565b60008181526020902082908460031c60005b81811015611af0576000805b6008811015611ae357611ad2611ab887611a57565b63ffffffff600584901b90811b801986169290911b161790565b602096909601959150600101611aa3565b5083820155600101611a97565b506007198616808703818814611b2f576000805b82811015611b2957611b18611ab888611a57565b602097909701969150600101611b04565b50848401555b5050505050505050565b6000823561011e1983360301811261199e57600080fd5b6000813561022181610f56565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808335601e19843603018112611b9457600080fd5b8301803591506001600160401b03821115611bae57600080fd5b6020019150368190038213156113ec57600080fd5b600181811c90821680611bd757607f821691505b60208210810361063f57634e487b7160e01b600052602260045260246000fd5b601f8211156109ce57806000526020600020601f840160051c81016020851015611c1e5750805b611932601f850160051c8301826119d8565b6001600160401b03831115611c4757611c47610ee8565b611c5b83611c558354611bc3565b83611bf7565b6000601f841160018114611c8f5760008515611c775750838201355b600019600387901b1c1916600186901b178355611932565b600083815260209020601f19861690835b82811015611cc05786850135825560209485019460019092019101611ca0565b5086821015611cdd5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000813561022181611524565b8135611d078161148d565b63ffffffff8116905081548163ffffffff198216178355602080850135611d2d81610f56565b6001600160c01b03199290921690921790821b640100000000600160c01b031617825560019082820190611d6460408601866118a5565b6001600160401b03811115611d7b57611d7b610ee8565b611d858185611939565b6000938452828420935b81811015611da857823585820155918301918501611d8f565b505050505050611dbb6060830183611b7d565b611dc9818360028601611c30565b5050610759611dda608084016119cb565b6003830160ff1981541660ff8315151681178255505050565b600160401b831115611e0757611e07610ee8565b805483825580841015611edc5760026001600160fe1b038281168314611e2f57611e2f6118ee565b8086168614611e4057611e406118ee565b5060008381526020812086831b81019084841b015b80821015611ed7578282556001611e6d818401611904565b848301611e7a8154611bc3565b8015611ec357601f80821160018114611e9557878455611ec0565b600084815260209020611eb183850160051c82018783016119d8565b50600084815260208120818655555b50505b505050826003830155600482019150611e55565b505050505b5060008181526020812083915b8581101561198057611f04611efe84876119b5565b83611cfc565b6020929092019160049190910190600101611ee9565b611f44611f26836119a8565b825467ffffffffffffffff19166001600160401b0391909116178255565b611f7b611f53602084016119a8565b825467ffffffffffffffff60401b191660409190911b67ffffffffffffffff60401b16178255565b60018101611f94611f8e60408501611b50565b82611b5d565b611fc1611fa3606085016119cb565b82805460ff60a01b191691151560a01b60ff60a01b16919091179055565b50611fda611fd160808401611b50565b60028301611b5d565b60a08201356003820155611ff160c0830183611b7d565b611fff818360048601611c30565b505061202561201060e08401611cef565b6005830160ff821660ff198254161781555050565b6120336101008301836118a5565b610597818360068601611df3565b61204b82836118a5565b6001600160401b0381111561206257612062610ee8565b61206c8184611939565b8260005260208060002060005b838110156120935784358282015593820193600101612079565b505080850135925060be198536030183126120ad57600080fd5b918401803560018501558281013560028501559160038401915060408301356120d581611425565b825467ffffffffffffffff19166001600160401b0382161783555060608301356120fe81611425565b825467ffffffffffffffff60401b1916604082901b67ffffffffffffffff60401b161783555061213160808401846119b5565b8035600486015591508101356005840161214a82611464565b8054604084013561215a81611474565b62ffffff199190911661ffff84161790151560101b62ff0000161781556121a4612186606085016119cb565b82805463ff000000191691151560181b63ff00000016919091179055565b50506121b360808201826118a5565b91506121c3828260068701611a64565b50506109ce6121d560a0830183611b39565b60078401611f1a565b600080604083850312156121f157600080fd5b82359150602083013561220381610f56565b809150509250929050565b600060018201612220576122206118ee565b506001019056fea264697066735822122052b56a4c3f6be7c974234585ff95e8f97f9bfc3e66eb275dc8706752e67bd55464736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10008,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "evmVerifierOfFlareTransaction",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10012,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "requiredTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Token)9984_storage)dyn_storage"
      },
      {
        "astId": 10014,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "chainId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10018,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "transactions",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(TransactionInfo)10045_storage)dyn_storage"
      },
      {
        "astId": 10035,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "vaults",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Vault)9992_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Event)1500_storage)dyn_storage": {
        "base": "t_struct(Event)1500_storage",
        "encoding": "dynamic_array",
        "label": "struct EVMTransaction.Event[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EventInfo)10006_storage)dyn_storage": {
        "base": "t_struct(EventInfo)10006_storage",
        "encoding": "dynamic_array",
        "label": "struct EventInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)9984_storage)dyn_storage": {
        "base": "t_struct(Token)9984_storage",
        "encoding": "dynamic_array",
        "label": "struct Token[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TransactionInfo)10045_storage)dyn_storage": {
        "base": "t_struct(TransactionInfo)10045_storage",
        "encoding": "dynamic_array",
        "label": "struct ETFLock.TransactionInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(VaultState)9997": {
        "encoding": "inplace",
        "label": "enum VaultState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Vault)9992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)9992_storage"
      },
      "t_struct(Event)1500_storage": {
        "encoding": "inplace",
        "label": "struct EVMTransaction.Event",
        "members": [
          {
            "astId": 1490,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "logIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1492,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "emitterAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1495,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "topics",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1497,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1499,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "removed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(EventInfo)10006_storage": {
        "encoding": "inplace",
        "label": "struct EventInfo",
        "members": [
          {
            "astId": 9999,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10001,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10003,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10005,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "contributor",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proof)1455_storage": {
        "encoding": "inplace",
        "label": "struct EVMTransaction.Proof",
        "members": [
          {
            "astId": 1451,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "merkleProof",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1454,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Response)1448_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(RequestBody)1467_storage": {
        "encoding": "inplace",
        "label": "struct EVMTransaction.RequestBody",
        "members": [
          {
            "astId": 1457,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "transactionHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1459,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "requiredConfirmations",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 1461,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "provideInput",
            "offset": 2,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1463,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "listEvents",
            "offset": 3,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1466,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "logIndices",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Response)1448_storage": {
        "encoding": "inplace",
        "label": "struct EVMTransaction.Response",
        "members": [
          {
            "astId": 1435,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "attestationType",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1437,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "sourceId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1439,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "votingRound",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1441,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "lowestUsedTimestamp",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1444,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "requestBody",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RequestBody)1467_storage"
          },
          {
            "astId": 1447,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "responseBody",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(ResponseBody)1488_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(ResponseBody)1488_storage": {
        "encoding": "inplace",
        "label": "struct EVMTransaction.ResponseBody",
        "members": [
          {
            "astId": 1469,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1471,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "timestamp",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1473,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "sourceAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1475,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "isDeployment",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1477,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "receivingAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1479,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1481,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "input",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1483,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 1487,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "events",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(Event)1500_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Token)9984_storage": {
        "encoding": "inplace",
        "label": "struct Token",
        "members": [
          {
            "astId": 9977,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9979,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9981,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9983,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_contributor",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TransactionInfo)10045_storage": {
        "encoding": "inplace",
        "label": "struct ETFLock.TransactionInfo",
        "members": [
          {
            "astId": 10038,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "originalTransaction",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Proof)1455_storage"
          },
          {
            "astId": 10040,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "eventNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 10044,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "eventInfo",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(EventInfo)10006_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(Vault)9992_storage": {
        "encoding": "inplace",
        "label": "struct Vault",
        "members": [
          {
            "astId": 9988,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Token)9984_storage)dyn_storage"
          },
          {
            "astId": 9991,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(VaultState)9997"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}